{"version":3,"sources":["functions/lib.js","components/stage1/Stage1Form.js","components/stage1/Stage1Modal.js","App.js","registerServiceWorker.js","index.js"],"names":["eventTargetIsValid","event","R","target","validity","valid","getNumSamplesOrLibrariesLabel","sf2type","getNumSamplesOrLibrariesPlaceholder","getCallbackHref","location","href","port","parseInt","toString","Stage1Form","initState","projectID","containerTypeIsPlate","numberOfSamplesOrLibraries","sf2IsDualIndex","barcodeSetIsNA","sf2HasPools","sf2HasUnpooledSamplesOrLibraries","sf2HasCustomPrimers","numberOfPools","numberOfCustomPrimers","numberOfUnpooledSamplesOrLibraries","numberOfSamplesOrLibrariesInPool","projectIDIsInvalid","numPoolsIsInvalid","numCustomPrimersIsInvalid","numSamplesOrLibrariesIsInvalid","numUnpooledSamplesOrLibrariesIsInvalid","numberOfSamplesOrLibrariesInPoolIsInvalid","numberOfPoolsAndUnpooledSamplesIsInvalid","comments","reissueIsEnabled","state","_this","updateStateField","key","value","stateElement","setState","handleChange","handleInputChange","field","invalidField","handleNumericInputChange","enableReissueIfAppropriate","console","log","check_url","window","concat","fetch","method","mode","body","headers","Content-Type","then","response","json","jsonBool","JSON","stringify","catch","error","handleProjectIDChange","newEvent","newEventTarget","handleCommentsChange","handleSF2TypeChange","handleContainerTypeChange","handleNumberOfSamplesOrLibrariesChange","toggleIsDualIndex","toggleBarcodeSetIsNA","toggleHasPools","toggleContainerTypeIsPlate","toggleHasUnpooledSamplesOrLibraries","handleNumberOfPoolsChange","toggleHasCustomPrimers","handleNumberOfCustomPrimersChange","handleNumberOfUnpooledSamplesOrLibrariesChange","handleNumberOf10XSamplesInPoolChange","poolNumber","currentValue","newNumberOfTenXSamplesInPool","newNumberOfTenXSamplesInPoolIsInvalid","handleNumberOfLibrariesInPoolChange","newNumberOfLibrariesInPool","newNumberOfLibrariesInPoolIsInvalid","getNumberOfSamplesOrLibrariesInPool","getNumSamplesOrLibrariesInPoolIsInvalid","getPoolKeys","formIsValid","isValid","length","forceUpdate","newNumberOfSamplesOrLibrariesInPoolIsInvalid","forEach","x","thisPool","handleSubmit","numberOfSamplesOrLibrariesInPools","y","project_data","pid","st","ctp","nsl","di","na","hp","np","hc","nc","husl","nusl","nslp","cm","props","submitData","alert","handleReissue","reissueProject","renderHasPoolsCheckbox","react_default","a","createElement","FormGroup","check","Label","Input","type","name","id","checked","onChange","renderNumberOfPoolsInput","style","marginTop","for","min","step","placeholder","backgroundColor","color","renderContainerTypeDropdown","renderNumberOfSamplesOrLibrariesInput","onInput","numSamplesOrLibrariesLabel","renderDualIndexCheckbox","renderHasCustomPrimersCheckbox","renderNumberOfCustomPrimersInput","renderBarcodeSetCheckbox","renderHasUnpooledSamplesCheckbox","renderNumberOfUnpooledSamplesInput","renderNumberOf10XSamplesInPoolInput","inputName","inputPlaceHolder","handleNumberOf10XSamplesInThisPoolChange","renderNumberOf10XSamplesInPoolsInputs","map","renderCustomerIsSendingPlatesCheckbox","renderHasUnpooledLibrariesCheckbox","renderNumberOfUnpooledLibrariesInput","renderNumberOfLibrariesInPoolInput","handleNumberOfLibrariesInThisPoolChange","renderNumberOfLibrariesInPoolsInputs","maxWidth","Form","onSubmit","e","preventDefault","autoComplete","this","Button","onClick","disabled","React","Component","Stage1Modal","Modal","isOpen","active","minWidth","ModalHeader","ModalBody","formUrl","App","stage1FormUrl","stage1ModalIsActive","submit_url","reissue_url","reissue_json","margin","Stage1Form_Stage1Form","stage1_Stage1Modal","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","App_App","document","getElementById","URL","process","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.81a14c69.chunk.js","sourcesContent":["// @flow\n// Helper functions for the SF2 webapp demo\nimport * as R from 'ramda';\n\nimport type { Columns, Grid, Row } from '../sf2datasheet/types/flowTypes';\nimport type { Grids, Table, Tables, SF2Data, AbbreviatedStage1FormState, Stage1FormState } from '../types/flowTypes';\n\n\nexport const isBase64Json = (str : string) : boolean => {\n\n    try {\n        return (btoa(JSON.stringify(JSON.parse(atob(str)))) === str);\n    } catch (err) {\n        return false;\n    }\n\n};\n\n\nexport const decodeQueryString = (queryString : string): ?Object => {\n\n    // Redirect to homepage if query string is invalid\n    if (isBase64Json(queryString)) {\n        return (JSON.parse(atob(queryString)));\n    } else {\n        return undefined;\n    }\n\n};\n\n\nexport const decodeFormStateQueryString = (queryString : string) : Stage1FormState => {\n\n    const decodedQueryString: ?AbbreviatedStage1FormState = decodeQueryString(queryString);\n\n    // given a valid query string, parse out the relevant fields and construct a Stage1FormState\n    // eslint-disable-next-line\n    if (decodedQueryString != undefined) {  // using != rather than !== so that flow will infer type correctly\n\n        const qsState: AbbreviatedStage1FormState = decodedQueryString;\n\n        return {\n            projectID: qsState.pid,\n            sf2type: qsState.st,\n            containerTypeIsPlate: qsState.ctp,\n            numberOfSamplesOrLibraries: qsState.nsl,\n            sf2IsDualIndex: qsState.di,\n            barcodeSetIsNA: qsState.na,\n            sf2HasPools: qsState.hp,\n            numberOfPools: qsState.np,\n            sf2HasCustomPrimers: qsState.hc,\n            numberOfCustomPrimers: qsState.nc,\n            sf2HasUnpooledSamplesOrLibraries: qsState.husl,\n            numberOfUnpooledSamplesOrLibraries: qsState.nusl,\n            numberOfSamplesOrLibrariesInPools: qsState.nslp\n        };\n\n    }\n\n    // given an invalid query string, return a blank Stage1FormState\n    return {\n        projectID: undefined,\n        sf2type: undefined,\n        containerTypeIsPlate: undefined,\n        numberOfSamplesOrLibraries: undefined,\n        sf2IsDualIndex: undefined,\n        barcodeSetIsNA: undefined,\n        sf2HasPools: undefined,\n        numberOfPools: undefined,\n        sf2HasCustomPrimers: undefined,\n        numberOfCustomPrimers: undefined\n    };\n\n};\n\n\nexport const calculateWellID = (rowNumber : number) : string => {\n\n    const groupNumber = Math.floor(rowNumber / 8) + 1;\n    const groupString = groupNumber < 10 ? '0' + groupNumber.toString() : groupNumber.toString();\n\n    const numberWithinGroup = rowNumber % 8;\n    const letterWithinGroup = String.fromCharCode(65 + numberWithinGroup);\n\n    return letterWithinGroup + ':' + groupString;\n\n};\n\n\nexport const eventTargetIsValid = (event : Object) => {\n    return R.isNil(event.target.validity) ? false : (event.target.validity.valid === true);\n};\n\n\nexport const calculateEGIDPrefix = (projectID : string) : string => {\n    const projectIDRegex = /^(\\d{5})_([^_])[^_]*_([^_])[^_]*$/;\n    return R.pipe(\n        R.match(projectIDRegex),\n        R.slice(1,4),\n        R.join(''),\n        R.toUpper\n    )(projectID);\n};\n\n\nexport const calculateEGIDIndex = (rowIndex : number) : string => ('000' + rowIndex.toString()).slice(-4);\n\n\nexport const calculateEGSampleID = (egIDPrefix : string, egIDIndex : string) : string => egIDPrefix + egIDIndex;\n\n\nexport const calculateEGLibraryID = (egIDPrefix : string, egIDIndex : string) : string => egIDPrefix + egIDIndex + 'L01';\n\n\nexport const calculateEGPoolID = (egIDPrefix : string, egIDIndex : string) : string => egIDPrefix + 'pool' + egIDIndex.slice(-2);\n\n\nexport const calculateEGPrimerID = (egIDPrefix : string, egIDIndex : string) : string => egIDPrefix + 'primer' + egIDIndex.slice(-2);\n\n\nexport const calculateEGID = (rowIndex : number, projectID : string, sf2type : string, tableType: string) : string => {\n\n    const egIDPrefix = calculateEGIDPrefix(projectID);\n    const egIDIndex = calculateEGIDIndex(rowIndex);\n\n    if(R.isEmpty(egIDPrefix)) {\n        // Failed to recognise Project ID\n        return 'unknown';\n    }\n\n    let egID = '';\n\n    if(sf2type === 'Sample' && tableType === 'SampleInformation') {\n        egID = calculateEGSampleID(egIDPrefix, egIDIndex);\n    } else if (sf2type === 'Library_old' && tableType === 'LibraryInformation') {\n        egID = calculateEGLibraryID(egIDPrefix, egIDIndex);\n    } else if(sf2type === 'Library_old' && tableType === 'PoolInformation') {\n        egID = calculateEGPoolID(egIDPrefix, egIDIndex);\n    } else if (sf2type === '10X_old' && tableType === '10XSampleInformation') {\n        egID = calculateEGSampleID(egIDPrefix, egIDIndex);\n    } else if(sf2type === '10X_old' && tableType === '10XPoolInformation') {\n        egID = calculateEGPoolID(egIDPrefix, egIDIndex);\n    } else if(sf2type === 'Library_old' && tableType === 'PrimerInformation') {\n        egID = calculateEGPrimerID(egIDPrefix, egIDIndex);\n    } else if(sf2type === 'Library' && tableType === 'PrimerInformation') {\n        egID = calculateEGPrimerID(egIDPrefix, egIDIndex);\n    } else {\n        egID = 'Error: bad SF2 type';\n    }\n\n    return egID;\n\n};\n\n\nexport const createFrozenGrid = (numberOfRows : number, frozenColumns : Columns, projectID : string, topRowNumber : number, sf2type : string, tableType : string, containerTypeIsPlate: boolean) : Grid => {\n\n    let rows = [];\n\n    for (let i = 0; i < numberOfRows; i++) {\n        let newRow = [];\n\n        if(tableType !== '10XPoolInformation' && tableType !== 'PrimerInformation' && tableType !== 'PoolInformation') {\n            switch (containerTypeIsPlate) {\n                case false:\n                    newRow.push({value: i + 1});\n                    break;\n                case true:\n                    newRow.push({value: calculateWellID(i)});\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        newRow.push(\n            {value: calculateEGID(i + topRowNumber, projectID, sf2type, tableType)}\n        );\n\n        rows.push(newRow);\n\n    }\n\n    return rows;\n\n};\n\n\nexport const calculateRowID = (rowIndex : number, containerTypeIsPlate : boolean) : string => {\n    return containerTypeIsPlate ? calculateWellID(rowIndex) : (rowIndex + 1).toString();\n};\n\n\nexport const initialiseGrids = (numberOfSamplesOrLibraries : number, maxRowsPerGrid : number) : Grids => {\n\n    const numberOfGrids = Math.ceil( numberOfSamplesOrLibraries / maxRowsPerGrid );\n    const numberOfRowsInLastGrid = numberOfSamplesOrLibraries % maxRowsPerGrid;\n\n    let gridSizes = R.repeat(maxRowsPerGrid, R.max(0, numberOfGrids-1));\n    if(numberOfRowsInLastGrid > 0) {\n        gridSizes.push(numberOfRowsInLastGrid);\n    } else if(numberOfSamplesOrLibraries > 0) {\n        // the number of samples or libraries is an exact multiple of the max number of rows per grid\n        gridSizes.push(maxRowsPerGrid);\n    }\n\n    return R.map(x => R.repeat([], x))(gridSizes);\n\n};\n\n\nexport const initialiseFrozenColumns = (frozenColumns : Columns, containerTypeIsPlate : boolean) : Columns => {\n\n    let newColumns = frozenColumns;\n\n    if(containerTypeIsPlate === false) {\n        newColumns[0].value = 'Tube ID'\n    }\n\n    return newColumns;\n\n};\n\n\nexport const getInitialGrids = (initialTables : Tables, tableType : string) : Grids => {\n    const getGrids = R.pipe(R.filter(R.propEq('name', tableType)), R.map(R.propOr([], 'grids')));\n    return Array.prototype.concat(...getGrids(initialTables));\n};\n\n\nexport const updateTables = (table: Table, allTables : Tables) : Tables => {\n    const hasOtherName = R.complement(R.propEq('name', table.name));\n    const otherTables = R.filter(hasOtherName)(allTables);\n    const newTables = R.concat(otherTables, [table]);\n    return R.sortBy(R.prop('name'))(newTables);\n};\n\n\nexport const getSF2 = (SF2Type : string, tables : Tables, frozenGrids : Grids) : SF2Data => {\n    return {name: SF2Type, tables: tables, frozenGrids: frozenGrids};\n};\n\n\nexport const getInitialTables = (props : {initialSF2Data: SF2Data}) : Tables => R.propOr([], 'tables')(props.initialSF2Data);\n\n\nexport const getNumSamplesOrLibrariesLabel = (sf2type : string) : string => {\n    switch(sf2type) {\n        case 'Sample':\n            return 'Number of samples';\n        case 'Library_old':\n            return 'Number of libraries';\n        case '10X_old':\n            return 'Number of 10X samples';\n        default:\n            return 'Error: SF2 type not recognised';\n    }\n};\n\n\nexport const getNumSamplesOrLibrariesPlaceholder = (sf2type : string) : string => {\n    switch(sf2type) {\n        case 'Sample':\n            return 'Enter the number of samples here';\n        case 'Library_old':\n            return 'Enter the number of libraries here';\n        case '10X_old':\n            return 'Enter the number of 10X samples here';\n        default:\n            return 'Error: SF2 type not recognised';\n    }\n};\n\n\nexport const getDuplicateMessage = (id : string, row : string, column : string) : string => {\n    return \"Duplicate ID '\" + id + \"' in row '\" + row + \"', column '\" + column + \"'\";\n};\n\n\nexport const getRepeatedKeys = (colIndex: number, grid : Grid) : Array<string> => {\n\n    const yourIDs = grid.map(x => x[colIndex].value);\n    const yourIDCounts = R.countBy(R.identity)(yourIDs);\n\n    return R.pipe(\n        R.pickBy((v,_) => (v>1)),\n        R.keys\n    )(yourIDCounts);\n\n};\n\n\nexport const getRowID = (rowIndex : number, colIndex : number, grid : Grid) : string => {\n\n    if (R.isNil(grid) || R.isNil(grid[rowIndex])) {\n        return (rowIndex + 1).toString();\n    } else {\n        return grid[rowIndex][colIndex].value;\n    }\n\n};\n\n\nexport const getDuplicateWarnings = (colIndex : number, columns : Columns, grid : Grid, frozenGrid : Grid, repeatedKeys : Array<string>) : Array<string> => {\n\n    let warnings = [];\n\n    if (!R.isNil(repeatedKeys) && repeatedKeys.length > 0) {\n\n        const idColumn = grid.map(x => x[colIndex]);\n        const colName = columns[colIndex].value;\n\n        idColumn.forEach((id, idIndex) => {\n\n            if(R.contains(id.value, repeatedKeys)){\n\n                const rowID = getRowID(idIndex, colIndex, frozenGrid);\n                const duplicateMessage = getDuplicateMessage(id.value, rowID, colName);\n\n                warnings.push({row: rowID, message: duplicateMessage});\n\n            }\n\n        });\n\n    }\n\n    return warnings;\n\n};\n\n\nexport const getInitialInformationTableGrids = (initialTables : Tables, frozenGrids : Grids, tableName : string) : Grids => {\n\n    const getMatchingTable = tables => R.find(R.propEq('name', tableName), tables);\n\n    const matchingTable = getMatchingTable(initialTables);\n    const matchingFrozenGrid = getMatchingTable(frozenGrids);\n\n    if(!R.isNil(matchingTable)) {\n        return matchingTable.grids.map(x=>x.grid);\n    } else if (matchingFrozenGrid.grids[0].length === 0) {\n        return [];\n    } else {\n        const frozenGridContents = matchingFrozenGrid.grids.map(x=>x.grid);\n        return frozenGridContents.map(frozenGrid => R.repeat([], frozenGrid.length));\n    }\n\n};\n\n\nexport const updateRow = (currentWellOffset : number, row : Row) : Row => {\n\n    const newWellIndex = row.wellIndex - currentWellOffset;\n    const newWellID = calculateWellID(newWellIndex-1);\n\n    return R.pipe(\n        R.assoc('wellIndex', newWellIndex),\n        R.assoc('egWellID', newWellID)\n    )(row);\n\n};\n\n\nexport const splitRows = (wellsPerPlate : number, rows : Grid) : Grids => {\n\n    const sortedRows = R.sort((a, b) => a.wellIndex - b.wellIndex)(rows);\n\n    let splitRows = [];\n    let currentPlate = [];\n    let currentWellOffset = 0;\n    let currentPlateMaximum = wellsPerPlate;\n\n    sortedRows.forEach(row => {\n\n        if (row.wellIndex > currentPlateMaximum) {\n            currentWellOffset = currentPlateMaximum;\n            currentPlateMaximum += wellsPerPlate;\n            splitRows = splitRows.concat([currentPlate]);\n            currentPlate = [updateRow(currentWellOffset, row)];\n        } else {\n            currentPlate = currentPlate.concat([updateRow(currentWellOffset, row)]);\n        }\n    });\n\n    splitRows = splitRows.concat([currentPlate]);\n\n    return splitRows;\n\n};\n\n\nexport const calculateFrozenGrids = (allRowsWithIDs : Object, containerTypeIsPlate : boolean, getRowsToReturn : (Array<Object>) => Array<Object>) : Grids => {\n\n    let frozenGrids = [];\n\n    if(containerTypeIsPlate) {\n        frozenGrids = R.pipe(\n            R.curry(splitRows)(96),\n            R.map(getRowsToReturn)\n        )(allRowsWithIDs);\n    } else {\n        frozenGrids = [getRowsToReturn(allRowsWithIDs)];\n    }\n\n    return frozenGrids;\n\n};\n\n\nexport const generatePlateID = (projectID, plateIndex) => {\n    const platePrefix = calculateEGIDPrefix(projectID);\n    const plateIndexString = (plateIndex + 1).toString().padStart(2, '0');\n    return(platePrefix + 'PLATE' + plateIndexString);\n};\n\n\nexport const getAllRowsWithSampleAndLibraryIDs = (initialState, startIndices) => {\n\n    const egIDPrefix = calculateEGIDPrefix(initialState.projectID);\n\n    const parseIntDefaultZero = x => parseInt(x, 10) || 0;\n\n    const numUnpooledSamplesOrLibraries =\n        parseIntDefaultZero(initialState.numberOfUnpooledSamplesOrLibraries) +\n        parseIntDefaultZero(initialState.numberOfSamplesOrLibraries);\n\n    const numPools = parseIntDefaultZero(initialState.numberOfPools);\n\n    const numSamplesOrLibrariesInPools = R.map(\n        parseIntDefaultZero\n    )(JSON.parse(R.propOr(\"{}\", \"numberOfSamplesOrLibrariesInPools\")(initialState)));\n\n    const sampleOrLibraryStart = parseIntDefaultZero(startIndices.sampleOrLibrary);\n    const unpooledSubmissionStart = parseIntDefaultZero(startIndices.unpooledSubmission);\n    const poolStart = parseIntDefaultZero(startIndices.pool);\n\n    const unpooledSampleIndices = R.range(\n        unpooledSubmissionStart,\n        unpooledSubmissionStart + numUnpooledSamplesOrLibraries\n    );\n\n    const unpooledSampleRows = unpooledSampleIndices.map(i => {\n\n        const egIDIndex = calculateEGIDIndex(i);\n        const wellIndex = i - unpooledSubmissionStart + 1;\n        const unpooledCell = {\n            'index': i,\n            'name': 'unpooled-'+i.toString(),\n            'egSubmissionID': calculateEGSampleID(egIDPrefix, egIDIndex),\n            'wellIndex': wellIndex,\n            'egWellID': calculateWellID(wellIndex-1)\n        };\n\n        return(unpooledCell);\n\n    });\n\n    const poolIndices = R.range(\n        poolStart,\n        poolStart + numPools\n    );\n\n    const pooledSampleRows = poolIndices.map(\n        p => {\n            const sampleIndicesInPool = R.range(1, numSamplesOrLibrariesInPools[p - poolStart + 1] + 1);\n            return sampleIndicesInPool.map(\n                i => {\n                    const wellIndex = p + numUnpooledSamplesOrLibraries - poolStart + 1;\n                    const egIDIndex = calculateEGIDIndex(p);\n                    const pooledCell = {\n                        'index': i,\n                        'name': 'pool' + p.toString() + '-' + i.toString(),\n                        'egSubmissionID': calculateEGPoolID(egIDPrefix, egIDIndex),\n                        'wellIndex': wellIndex,\n                        'egWellID': calculateWellID(wellIndex-1)\n                    };\n                    return(pooledCell);\n                }\n            );\n        }\n    );\n\n    const allRows = R.flatten([unpooledSampleRows, pooledSampleRows]);\n\n    const allRowsWithSampleAndLibraryIDs = allRows.map((r, i) => {\n        const egIDIndex = calculateEGIDIndex(i + sampleOrLibraryStart);\n        return R.pipe(\n            R.assoc('egLibraryID', calculateEGLibraryID(egIDPrefix, egIDIndex)),\n            R.assoc('egSampleID', calculateEGSampleID(egIDPrefix, egIDIndex))\n        )(r)\n    });\n\n    return(allRowsWithSampleAndLibraryIDs);\n\n};\n\n\nexport const generateContainerOffset = containerStartIndex => {\n    return R.isNil(containerStartIndex) ? 0 :\n        parseInt(containerStartIndex, 10) - 1;\n};\n\n\nexport const addContainerIDs = (containerIDs, grids) => {\n    return R.zip(containerIDs, grids)\n        .map(x => {return{id: x[0], grid: x[1]}});\n};\n\n\nexport const getContainerIDs = (frozenGrids, containerStartIndex, containerTypeIsPlate, projectID) => {\n\n    const getContainerID = (grid, gridIndex) => {\n        const adjustedGridIndex = gridIndex + parseInt(containerStartIndex, 10) - 1;\n        return containerTypeIsPlate ? generatePlateID(projectID, adjustedGridIndex) : gridIndex.toString();\n    };\n\n    return frozenGrids.map(getContainerID);\n\n};\n\n\nexport const getCallbackHref = (location : Object) : string => {\n\n    // work out web service url\n    let href = '';\n    const port = parseInt(location.port, 10);\n\n    // dev environment uses port 3000, 3001, 3002, prod uses 8000, 8001, 8002\n    if(port < 4000) {\n        // running in dev environment, need to infer the web service port\n        const servPort = (port + 5000).toString();\n        href = \"http://localhost:\" + servPort + \"/\";\n    } else {\n        // running in test / production, get url from window.location\n        href = location.href;\n    }\n\n    return href;\n\n};\n","// @flow\nimport React from 'react';\nimport * as R from 'ramda';\n\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\n\nimport { Stage1FormState } from '../../types/flowTypes';\nimport { eventTargetIsValid, getNumSamplesOrLibrariesLabel, getNumSamplesOrLibrariesPlaceholder,\ngetCallbackHref } from '../../functions/lib';\n\n\ntype Stage1FormProps = {\n    submitData: (string) => void,\n    reissueProject: (string, string) => void\n};\n\n\nexport default class Stage1Form extends React.Component<Stage1FormProps, Stage1FormState> {\n    initState = {\n        projectID: '',\n        sf2type: 'Sample',\n        containerTypeIsPlate: false,\n        numberOfSamplesOrLibraries: '',\n        sf2IsDualIndex: true,\n        barcodeSetIsNA: false,\n        sf2HasPools: false,\n        sf2HasUnpooledSamplesOrLibraries: false,\n        sf2HasCustomPrimers: false,\n        numberOfPools: '',\n        numberOfCustomPrimers: '',\n        numberOfUnpooledSamplesOrLibraries: '',\n        numberOfSamplesOrLibrariesInPool: {},\n        projectIDIsInvalid: false,\n        numPoolsIsInvalid: false,\n        numCustomPrimersIsInvalid: false,\n        numSamplesOrLibrariesIsInvalid: false,\n        numUnpooledSamplesOrLibrariesIsInvalid: false,\n        numberOfSamplesOrLibrariesInPoolIsInvalid: {},\n        numberOfPoolsAndUnpooledSamplesIsInvalid: false,\n        comments: '',\n        reissueIsEnabled: false\n    };\n\n    state = this.initState;\n\n    // Helper functions for event handlers\n\n    updateStateField = (key : string, value : any) => {\n        let stateElement = {};\n        stateElement[key] = value;\n        this.setState(stateElement);\n    };\n\n\n    handleChange = (event : SyntheticInputEvent<HTMLInputElement>, key: string) => {\n        this.updateStateField(key, event.target.value);\n    };\n\n\n    handleInputChange = (event : SyntheticInputEvent<HTMLInputElement>, field : string, invalidField : string) => {\n        this.updateStateField(field, event.target.value);\n        this.updateStateField(invalidField, !eventTargetIsValid(event));\n    };\n\n\n    handleNumericInputChange = (event : SyntheticInputEvent<HTMLInputElement>, field : string, invalidField : string) => {\n\n        // reset value if it's invalid (handles e, E, +, ., or - etc.)\n        if (!eventTargetIsValid(event)) {\n            event.target.value = this.state[field];\n        }\n\n        this.handleInputChange(event, field, invalidField);\n\n    };\n\n\n    enableReissueIfAppropriate = (projectID : string) => {\n\n        console.log('Enabling reissue if appropriate for project ID: ', projectID);\n\n        const check_url = getCallbackHref(window.location).concat(\"check/\");\n\n        fetch(check_url, {\n          method: 'POST',\n          mode: 'cors',\n          body: projectID,\n          headers:{\n            'Content-Type': 'application/json'\n          }\n        })\n            .then(response => response.json())\n            .then(\n            json => {\n                const jsonBool = R.equals(JSON.stringify(json), 'true');\n                this.updateStateField('reissueIsEnabled', jsonBool);\n            }).catch(error => {\n                console.error('Error (check):', error);\n            });\n\n    }\n\n\n    // event handlers to manage the state of the form component\n\n    handleProjectIDChange = (event : SyntheticInputEvent<HTMLInputElement>) => {\n\n        let newEvent = event;\n\n        if(!R.test(/^\\d{5}_[^_]+_[^_]+$/)(event.target.value)) {\n            const newEventTarget = R.assoc('validity', {'valid': false}, event.target);\n            newEvent = R.assoc('target', newEventTarget, event);\n        } else {\n            this.enableReissueIfAppropriate(event.target.value);\n        }\n\n        this.handleInputChange(newEvent, 'projectID', 'projectIDIsInvalid');\n\n    };\n\n\n    handleCommentsChange = (event : SyntheticInputEvent<HTMLInputElement>) => {\n        this.updateStateField('comments', event.target.value);\n    };\n\n\n    handleSF2TypeChange = (event: SyntheticInputEvent<HTMLInputElement>) => {\n        this.setState(\n            R.pipe(\n                R.assoc('sf2type', event.target.value),\n                R.assoc('projectID', this.state.projectID)\n            )(this.initState)\n        );\n    };\n\n\n    handleContainerTypeChange = (event: SyntheticInputEvent<HTMLInputElement>) => {\n        if(event.target.value === 'Plate' && this.state.containerTypeIsPlate === false) {\n            this.setState({'containerTypeIsPlate': true});\n        } else if(event.target.value === 'Tube' && this.state.containerTypeIsPlate === true) {\n            this.setState({'containerTypeIsPlate': false});\n        }\n    };\n\n\n    handleNumberOfSamplesOrLibrariesChange = (event: SyntheticInputEvent<HTMLInputElement>) => {\n        this.handleNumericInputChange(event, 'numberOfSamplesOrLibraries', 'numSamplesOrLibrariesIsInvalid');\n    };\n\n\n    toggleIsDualIndex = () => {\n        this.setState({\n            sf2IsDualIndex: !this.state.sf2IsDualIndex\n        });\n    };\n\n\n    toggleBarcodeSetIsNA = () => {\n        this.setState({\n            barcodeSetIsNA: !this.state.barcodeSetIsNA\n        });\n    };\n\n\n    toggleHasPools = () => {\n        this.setState({\n            sf2HasPools: !this.state.sf2HasPools,\n            numberOfPools: \"\",\n            numberOfSamplesOrLibrariesInPool: {},\n            numberOfSamplesOrLibrariesInPoolIsInvalid: {},\n            numberOfPoolsAndUnpooledSamplesIsInvalid: false\n        });\n    };\n\n\n    toggleContainerTypeIsPlate = () => {\n        this.setState({\n            containerTypeIsPlate: !this.state.containerTypeIsPlate\n        });\n    };\n\n\n    toggleHasUnpooledSamplesOrLibraries = () => {\n        this.setState({\n            sf2HasUnpooledSamplesOrLibraries: !this.state.sf2HasUnpooledSamplesOrLibraries,\n            numberOfUnpooledSamplesOrLibraries: \"\",\n            numUnpooledSamplesOrLibrariesIsInvalid: false\n        });\n    };\n\n\n    handleNumberOfPoolsChange = (event: SyntheticInputEvent<HTMLInputElement>) => {\n        this.handleNumericInputChange(event, 'numberOfPools', 'numPoolsIsInvalid');\n    };\n\n\n    toggleHasCustomPrimers = () => {\n        this.setState({\n            sf2HasCustomPrimers: !this.state.sf2HasCustomPrimers,\n            numberOfCustomPrimers: \"\",\n            numCustomPrimersIsInvalid: false\n        });\n    };\n\n\n    handleNumberOfCustomPrimersChange = (event: SyntheticInputEvent<HTMLInputElement>) => {\n        this.handleNumericInputChange(event, 'numberOfCustomPrimers', 'numCustomPrimersIsInvalid');\n    };\n\n\n    handleNumberOfUnpooledSamplesOrLibrariesChange = (event: SyntheticInputEvent<HTMLInputElement>) => {\n        this.handleNumericInputChange(event, 'numberOfUnpooledSamplesOrLibraries', 'numUnpooledSamplesOrLibrariesIsInvalid');\n    };\n\n\n    handleNumberOf10XSamplesInPoolChange = (poolNumber : number, event: SyntheticInputEvent<HTMLInputElement>) => {\n\n        const currentValue = this.state.numberOfSamplesOrLibrariesInPool[poolNumber];\n\n        if (!eventTargetIsValid(event)) {\n            event.target.value = currentValue;\n        }\n\n        const newNumberOfTenXSamplesInPool = R.assoc(poolNumber, event.target.value, this.state.numberOfSamplesOrLibrariesInPool);\n        this.updateStateField('numberOfSamplesOrLibrariesInPool', newNumberOfTenXSamplesInPool);\n\n        const newNumberOfTenXSamplesInPoolIsInvalid = R.assoc(poolNumber, !eventTargetIsValid(event), this.state.numberOfSamplesOrLibrariesInPoolIsInvalid);\n        this.updateStateField('numberOfSamplesOrLibrariesInPoolIsInvalid', newNumberOfTenXSamplesInPoolIsInvalid);\n\n    };\n\n\n    handleNumberOfLibrariesInPoolChange = (poolNumber : number, event: SyntheticInputEvent<HTMLInputElement>) => {\n\n        const currentValue = this.state.numberOfSamplesOrLibrariesInPool[poolNumber];\n\n        if (!eventTargetIsValid(event)) {\n            event.target.value = currentValue;\n        }\n\n        const newNumberOfLibrariesInPool = R.assoc(poolNumber, event.target.value, this.state.numberOfSamplesOrLibrariesInPool);\n        this.updateStateField('numberOfSamplesOrLibrariesInPool', newNumberOfLibrariesInPool);\n\n        const newNumberOfLibrariesInPoolIsInvalid = R.assoc(poolNumber, !eventTargetIsValid(event), this.state.numberOfSamplesOrLibrariesInPoolIsInvalid);\n        this.updateStateField('numberOfSamplesOrLibrariesInPoolIsInvalid', newNumberOfLibrariesInPoolIsInvalid);\n\n    };\n\n\n    getNumberOfSamplesOrLibrariesInPool = (poolNumber : number) : number => {\n        return this.state.numberOfSamplesOrLibrariesInPool[poolNumber];\n    };\n\n\n    getNumSamplesOrLibrariesInPoolIsInvalid = (poolNumber: number) : boolean => {\n        return this.state.numberOfSamplesOrLibrariesInPoolIsInvalid[poolNumber];\n    };\n\n\n    getPoolKeys = () => R.range(1, parseInt(this.state.numberOfPools, 10) + 1);\n\n\n    // Form validation method\n\n    formIsValid = () => {\n\n        let isValid = true;\n\n        // The project ID cannot be empty\n        if(this.state.projectID.length<1) {\n            this.setState({projectIDIsInvalid: true});\n            this.forceUpdate();\n            isValid = false;\n        }\n\n        // The number of samples or libraries cannot be empty\n        if(this.state.sf2type !== '10X' && this.state.sf2type !== 'Library' && this.state.numberOfSamplesOrLibraries.length<1) {\n            this.setState({numSamplesOrLibrariesIsInvalid: true});\n            this.forceUpdate();\n            isValid = false;\n        }\n\n        // If the SF2 has pools the number of pools cannot be empty\n        if(this.state.sf2HasPools && this.state.numberOfPools.length<1) {\n            this.setState({numPoolsIsInvalid: true});\n            this.forceUpdate();\n            isValid = false;\n        }\n\n        // If the SF2 has custom primers the number of custom primers cannot be empty\n        if(this.state.sf2HasCustomPrimers && this.state.numberOfCustomPrimers.length<1) {\n            this.setState({numCustomPrimersIsInvalid: true});\n            this.forceUpdate();\n            isValid = false;\n        }\n\n        // If the SF2 has unpooled samples or libraries the number of unpooled 10X samples or libraries cannot be empty\n        if(this.state.sf2HasUnpooledSamplesOrLibraries && this.state.numberOfUnpooledSamplesOrLibraries.length<1) {\n            this.setState({numUnpooledSamplesOrLibrariesIsInvalid: true});\n            this.forceUpdate();\n            isValid = false;\n        }\n\n        // If the SF2 is 10X or Library and has pools, the number of 10X samples or libraries in each pool cannot be empty\n        if((this.state.sf2type === '10X' || this.state.sf2type === 'Library') && this.state.sf2HasPools) {\n            let newNumberOfSamplesOrLibrariesInPoolIsInvalid = {};\n            this.getPoolKeys().forEach(x => {\n                const thisPool = this.state.numberOfSamplesOrLibrariesInPool[x] || '';\n                newNumberOfSamplesOrLibrariesInPoolIsInvalid[x] = (thisPool.length < 1);\n            });\n            if(!R.equals(newNumberOfSamplesOrLibrariesInPoolIsInvalid, this.state.numberOfSamplesOrLibrariesInPoolIsInvalid)) {\n                this.setState({\n                    numberOfSamplesOrLibrariesInPoolIsInvalid: newNumberOfSamplesOrLibrariesInPoolIsInvalid\n                });\n                this.forceUpdate();\n            }\n            isValid = isValid ? R.compose(R.none(R.identity), R.values)(newNumberOfSamplesOrLibrariesInPoolIsInvalid) : false;\n\n        }\n\n        // If the SF2 is 10X or Library and there are no pools and no unpooled samples, the form is invalid\n        if((this.state.sf2type === '10X' || this.state.sf2type === 'Library') && !this.state.sf2HasPools && !this.state.sf2HasUnpooledSamplesOrLibraries) {\n            this.setState({\n                numberOfPoolsAndUnpooledSamplesIsInvalid: true\n            });\n            this.forceUpdate();\n            isValid = false;\n        }\n\n        return(isValid);\n\n    };\n\n\n    // Handler for the submission logic\n    handleSubmit = (event: SyntheticInputEvent<HTMLInputElement>) => {\n\n        let numberOfSamplesOrLibrariesInPools = '{}';\n        if(this.state.sf2type === '10X' || this.state.sf2type === 'Library') {\n            numberOfSamplesOrLibrariesInPools = JSON.stringify(\n                R.filter(x => R.any(y => R.equals(x,y)(this.getPoolKeys())), this.state.numberOfSamplesOrLibrariesInPool)\n            );\n        }\n\n        if(this.formIsValid()) {\n\n            const project_data = JSON.stringify({\n                pid: this.state.projectID,\n                st: this.state.sf2type,\n                ctp: this.state.containerTypeIsPlate,\n                nsl: this.state.numberOfSamplesOrLibraries,\n                di: this.state.sf2IsDualIndex,\n                na: this.state.barcodeSetIsNA,\n                hp: this.state.sf2HasPools,\n                np: this.state.numberOfPools,\n                hc: this.state.sf2HasCustomPrimers,\n                nc: this.state.numberOfCustomPrimers,\n                husl: this.state.sf2HasUnpooledSamplesOrLibraries,\n                nusl: this.state.numberOfUnpooledSamplesOrLibraries,\n                nslp: numberOfSamplesOrLibrariesInPools,\n                cm: this.state.comments\n            });\n\n            this.props.submitData(project_data);\n\n        } else {\n            alert('Form contains errors. Please fix these before submitting.');\n        }\n\n    };\n\n\n    handleReissue = (event: SyntheticInputEvent<HTMLInputElement>) => {\n        this.props.reissueProject(this.state.projectID, this.state.comments);\n    }\n\n\n    // UI components\n\n    // General\n\n    renderHasPoolsCheckbox = () => <FormGroup check>\n        <Label check>\n            <Input\n                type=\"checkbox\"\n                name=\"poolCheck\"\n                id=\"poolCheck\"\n                checked={this.state.sf2HasPools}\n                onChange={this.toggleHasPools}\n            />{' '}\n            SF2 has pools\n        </Label>\n    </FormGroup>;\n\n\n    renderNumberOfPoolsInput = () => {\n\n        if(this.state.sf2HasPools === true) {\n            return(<FormGroup><div style={{\"marginTop\": \"10px\"}}>\n                <Label for=\"numPools\">Number of Pools</Label>\n                <Input type=\"number\"\n                       name=\"numPools\"\n                       id=\"numPools\"\n                       min=\"0\"\n                       step=\"1\"\n                       onChange={this.handleNumberOfPoolsChange}\n                       placeholder=\"Enter the number of pools here\"\n                       style={this.state.numPoolsIsInvalid ? {backgroundColor: \"#f8d7da\"} : {}}\n                />\n\n                {this.state.numPoolsIsInvalid &&\n                <span style={{color: \"#f83244\"}} >Number of Pools is a required field when the SF2 has pools, and must be a positive integer.</span>\n                }\n            </div></FormGroup>);\n        } else {\n           return('');\n        }\n\n    };\n\n\n    renderContainerTypeDropdown = () => <FormGroup>\n        <Label for=\"containerType\">Container Type</Label>\n        <Input type=\"select\" name=\"containerType\" id=\"containerType\"\n               onChange={this.handleContainerTypeChange}>\n            <option value=\"Tube\">Tube</option>\n            <option value=\"Plate\">Plate</option>\n        </Input>\n    </FormGroup>;\n\n\n    renderNumberOfSamplesOrLibrariesInput = () => <FormGroup>\n            <Label for=\"numSamplesOrLibraries\">{getNumSamplesOrLibrariesLabel(this.state.sf2type)}</Label>\n            <Input type=\"number\"\n                   name=\"numSamplesOrLibraries\"\n                   id=\"numSamplesOrLibraries\"\n                   min=\"0\"\n                   step=\"1\"\n                   onChange={this.handleNumberOfSamplesOrLibrariesChange}\n                   onInput={this.handleNumberOfSamplesOrLibrariesChange}\n                   value={this.state.numberOfSamplesOrLibraries}\n                   placeholder={getNumSamplesOrLibrariesPlaceholder(this.state.sf2type)}\n                   style={this.state.numSamplesOrLibrariesIsInvalid ? {backgroundColor: \"#f8d7da\"} : {}}\n            />\n\n            {this.state.numSamplesOrLibrariesIsInvalid &&\n                <span style={{color: \"#f83244\"}} >{this.state.numSamplesOrLibrariesLabel} is a required field, and must be a positive integer.</span>\n            }\n        </FormGroup>;\n\n\n    // Library SF2\n\n    renderDualIndexCheckbox = () => <FormGroup check>\n        <Label check>\n            <Input\n                type=\"checkbox\"\n                name=\"dualIndexCheck\"\n                id=\"dualIndexCheck\"\n                checked={this.state.sf2IsDualIndex}\n                onChange={this.toggleIsDualIndex}\n            />{' '}\n            SF2 is dual index (leave unchecked for a single index SF2)\n            </Label>\n        </FormGroup>;\n\n\n    renderHasCustomPrimersCheckbox = () => <FormGroup check>\n        <Label check>\n            <Input\n                type=\"checkbox\"\n                name=\"primerCheck\"\n                id=\"primerCheck\"\n                checked={this.state.sf2HasCustomPrimers}\n                onChange={this.toggleHasCustomPrimers}\n            />{' '}\n            SF2 has custom primers\n        </Label>\n    </FormGroup>;\n\n\n    renderNumberOfCustomPrimersInput = () => {\n        if(this.state.sf2HasCustomPrimers === true) {\n            return(\n                <FormGroup><div style={{\"marginTop\": \"10px\"}}>\n                    <Label for=\"numCustomPrimers\">Number of Custom Primers</Label>\n                    <Input type=\"number\"\n                           name=\"numCustomPrimers\"\n                           id=\"numCustomPrimers\"\n                           min=\"0\"\n                           step=\"1\"\n                           onChange={this.handleNumberOfCustomPrimersChange}\n                           placeholder=\"Enter the number of custom primers here\"\n                           style={this.state.numCustomPrimersIsInvalid ? {backgroundColor: \"#f8d7da\"} : {}}\n                    />\n\n                    {this.state.numCustomPrimersIsInvalid &&\n                        <span style={{color: \"#f83244\"}} >Number of Custom Primers is a required field when the library has custom primers, and must be a positive integer.</span>\n                    }\n                </div></FormGroup>\n            );\n        } else {\n            return('');\n        }\n    };\n\n    // 10X SF2\n\n    renderBarcodeSetCheckbox = () => <FormGroup check>\n        <Label check>\n            <Input\n                type=\"checkbox\"\n                name=\"barcodeSetCheck\"\n                id=\"barcodeSetCheck\"\n                checked={this.state.barcodeSetIsNA}\n                onChange={this.toggleBarcodeSetIsNA}\n            />{' '}\n            SF2 uses NA barcode set (leave unchecked to use GA barcode set)\n        </Label>\n    </FormGroup>;\n\n\n    renderHasUnpooledSamplesCheckbox = () => <FormGroup check>\n        <Label check>\n            <Input\n                type=\"checkbox\"\n                name=\"unpooledCheckTenX\"\n                id=\"unpooledCheckTenX\"\n                checked={this.state.sf2HasUnpooledSamplesOrLibraries}\n                onChange={this.toggleHasUnpooledSamplesOrLibraries}\n            />{' '}\n            SF2 has unpooled samples\n        </Label>\n    </FormGroup>;\n\n\n    renderNumberOfUnpooledSamplesInput = () => {\n\n        if(this.state.sf2HasUnpooledSamplesOrLibraries === true) {\n            return(<FormGroup><div style={{\"marginTop\": \"10px\"}}>\n                <Label for=\"numUnpooledTenXSamples\">Number of Unpooled 10X Samples</Label>\n                <Input type=\"number\"\n                       name=\"numUnpooledTenXSamples\"\n                       id=\"numUnpooledTenXSamples\"\n                       min=\"0\"\n                       step=\"1\"\n                       onChange={this.handleNumberOfUnpooledSamplesOrLibrariesChange}\n                       onInput={this.handleNumberOfUnpooledSamplesOrLibrariesChange}\n                       value={this.state.numberOfUnpooledSamplesOrLibraries}\n                       placeholder=\"Enter the number of unpooled 10X samples here\"\n                       style={this.state.numUnpooledSamplesOrLibrariesIsInvalid ? {backgroundColor: \"#f8d7da\"} : {}}\n                />\n                {this.state.numUnpooledSamplesOrLibrariesIsInvalid &&\n                    <span style={{color: \"#f83244\"}} >Number of unpooled 10X samples is a required field when the SF2 has unpooled samples, and must be a positive integer.</span>\n                }\n            </div></FormGroup>);\n        } else {\n            return('');\n        }\n\n    };\n\n\n    renderNumberOf10XSamplesInPoolInput = (poolNumber : number) => {\n\n        const inputName = \"num10XSamplesInPool\" + poolNumber.toString();\n        const inputPlaceHolder = \"Enter the number of 10X samples in pool \" + poolNumber.toString() + \" here\";\n\n        const handleNumberOf10XSamplesInThisPoolChange = R.curry(this.handleNumberOf10XSamplesInPoolChange)(poolNumber);\n\n        return(\n            <FormGroup key={inputName + 'FormGroup'}>\n                <Label for={inputName}>Number of 10X Samples in Pool {poolNumber}</Label>\n                <Input type=\"number\"\n                       key={inputName + 'Input'}\n                       name={inputName}\n                       id={inputName}\n                       min=\"0\"\n                       step=\"1\"\n                       onChange={handleNumberOf10XSamplesInThisPoolChange}\n                       onInput={handleNumberOf10XSamplesInThisPoolChange}\n                       value={this.getNumberOfSamplesOrLibrariesInPool(poolNumber) || ''}\n                       placeholder={inputPlaceHolder}\n                       style={this.getNumSamplesOrLibrariesInPoolIsInvalid(poolNumber) ? {backgroundColor: \"#f8d7da\"} : {}}\n                />\n                {this.getNumSamplesOrLibrariesInPoolIsInvalid(poolNumber) &&\n                    <span style={{color: \"#f83244\"}} >Number of 10X samples in pool {poolNumber} is a required field when the SF2 has {poolNumber} or more pools, and must be a positive integer.</span>\n                }\n            </FormGroup>\n        );\n\n    };\n\n\n    renderNumberOf10XSamplesInPoolsInputs = () => {\n        if(this.state.sf2HasPools === true && this.state.numberOfPools > 0) {\n            return(\n                <FormGroup>\n                    {R.range(1, parseInt(this.state.numberOfPools, 10) + 1).map(\n                        x => this.renderNumberOf10XSamplesInPoolInput(x)\n                    )}\n                </FormGroup>\n            );\n        } else {\n            return('');\n        }\n    };\n\n\n    // Library SF2\n\n    renderCustomerIsSendingPlatesCheckbox = () => <FormGroup check>\n        <Label check>\n            <Input\n                type=\"checkbox\"\n                name=\"platesCheckLibrary\"\n                id=\"platesCheckLibrary\"\n                checked={this.state.containerTypeIsPlate}\n                onChange={this.toggleContainerTypeIsPlate}\n            />{' '}\n            Customer is sending plates (leave unchecked if customer is sending tubes)\n        </Label>\n    </FormGroup>;\n\n\n    renderHasUnpooledLibrariesCheckbox = () => <FormGroup check>\n        <Label check>\n            <Input\n                type=\"checkbox\"\n                name=\"unpooledCheckLibrary\"\n                id=\"unpooledCheckLibrary\"\n                checked={this.state.sf2HasUnpooledSamplesOrLibraries}\n                onChange={this.toggleHasUnpooledSamplesOrLibraries}\n            />{' '}\n            SF2 has unpooled libraries\n        </Label>\n    </FormGroup>;\n\n\n    renderNumberOfUnpooledLibrariesInput = () => {\n\n        if(this.state.sf2HasUnpooledSamplesOrLibraries === true) {\n            return(<FormGroup><div style={{\"marginTop\": \"10px\"}}>\n                <Label for=\"numUnpooledLibraries\">Number of Unpooled Libraries</Label>\n                <Input type=\"number\"\n                       name=\"numUnpooledLibraries\"\n                       id=\"numUnpooledLibraries\"\n                       min=\"0\"\n                       step=\"1\"\n                       onChange={this.handleNumberOfUnpooledSamplesOrLibrariesChange}\n                       onInput={this.handleNumberOfUnpooledSamplesOrLibrariesChange}\n                       value={this.state.numberOfUnpooledSamplesOrLibraries}\n                       placeholder=\"Enter the number of unpooled libraries here\"\n                       style={this.state.numUnpooledSamplesOrLibrariesIsInvalid ? {backgroundColor: \"#f8d7da\"} : {}}\n                />\n                {this.state.numUnpooledSamplesOrLibrariesIsInvalid &&\n                <span style={{color: \"#f83244\"}} >Number of unpooled libraries is a required field when the SF2 has unpooled libraries, and must be a positive integer.</span>\n                }\n            </div></FormGroup>);\n        } else {\n            return('');\n        }\n\n    };\n\n\n    renderNumberOfLibrariesInPoolInput = (poolNumber : number) => {\n\n        const inputName = \"numLibrariesInPool\" + poolNumber.toString();\n        const inputPlaceHolder = \"Enter the number of libraries in pool \" + poolNumber.toString() + \" here\";\n\n        const handleNumberOfLibrariesInThisPoolChange = R.curry(this.handleNumberOfLibrariesInPoolChange)(poolNumber);\n\n        return(\n            <FormGroup key={inputName + 'FormGroup'}>\n                <Label for={inputName}>Number of Samples in Pool {poolNumber}</Label>\n                <Input type=\"number\"\n                       key={inputName + 'Input'}\n                       name={inputName}\n                       id={inputName}\n                       min=\"0\"\n                       step=\"1\"\n                       onChange={handleNumberOfLibrariesInThisPoolChange}\n                       onInput={handleNumberOfLibrariesInThisPoolChange}\n                       value={this.getNumberOfSamplesOrLibrariesInPool(poolNumber) || ''}\n                       placeholder={inputPlaceHolder}\n                       style={this.getNumSamplesOrLibrariesInPoolIsInvalid(poolNumber) ? {backgroundColor: \"#f8d7da\"} : {}}\n                />\n                {this.getNumSamplesOrLibrariesInPoolIsInvalid(poolNumber) &&\n                <span style={{color: \"#f83244\"}} >Number of libraries in pool {poolNumber} is a required field when the SF2 has {poolNumber} or more pools, and must be a positive integer.</span>\n                }\n            </FormGroup>\n        );\n\n    };\n\n\n    renderNumberOfLibrariesInPoolsInputs = () => {\n        if(this.state.sf2HasPools === true && this.state.numberOfPools > 0) {\n            return(\n                <FormGroup>\n                    {R.range(1, parseInt(this.state.numberOfPools, 10) + 1).map(\n                        x => this.renderNumberOfLibrariesInPoolInput(x)\n                    )}\n                </FormGroup>\n            );\n        } else {\n            return('');\n        }\n    };\n\n\n    // Main render function\n\n    render () {\n        return (\n            <div style={{maxWidth: \"640px\"}}>\n                <h2>Project Setup</h2>\n                <br/>\n                <Form onSubmit={e=>{e.preventDefault()}}>\n                    <FormGroup>\n                        <Label for=\"projectID\">Project ID</Label>\n                        <Input type=\"text\"\n                               name=\"projectID\"\n                               id=\"projectID\"\n                               placeholder=\"Enter the ID for the new project here\"\n                               autoComplete=\"off\"\n                               onChange={this.handleProjectIDChange}\n                               onInput={this.handleProjectIDChange}\n                               value={this.state.projectID}\n                               style={this.state.projectIDIsInvalid ? {backgroundColor: \"#f8d7da\"} : {}}\n                        />\n                        {this.state.projectIDIsInvalid && <span style={{color: \"#f83244\"}} >Project ID is a required field, and must take the form 12345_Surname_Forename.</span>}\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"sf2Type\">SF2 Type</Label>\n                        <Input type=\"select\" name=\"sf2Type\" id=\"sf2TypeSelector\" onChange={this.handleSF2TypeChange}>\n                            <option value=\"Sample\">Sample</option>\n                            <option value=\"Library\">Library</option>\n                            {/*<option value=\"Library_old\">Library (old)</option>*/}\n                            <option value=\"10X\">10X</option>\n                            {/*<option value=\"10X_old\">10X (old)</option>*/}\n                        </Input>\n                    </FormGroup>\n                    {this.state.sf2type === \"Sample\" &&\n                    <FormGroup>\n                        <Label>Sample SF2 Options</Label>\n\n                        {this.renderContainerTypeDropdown()}\n                        {this.renderNumberOfSamplesOrLibrariesInput()}\n\n                    </FormGroup>\n                    }\n                    {this.state.sf2type === \"Library_old\" &&\n                    <FormGroup>\n                        <Label>Library SF2 Options (old)</Label>\n\n                        <FormGroup>\n                            {this.renderDualIndexCheckbox()}\n                            {this.renderHasPoolsCheckbox()}\n                            {this.renderHasCustomPrimersCheckbox()}\n                            {this.renderNumberOfPoolsInput()}\n                            {this.renderNumberOfCustomPrimersInput()}\n                        </FormGroup>\n\n                        {this.renderContainerTypeDropdown()}\n                        {this.renderNumberOfSamplesOrLibrariesInput()}\n\n                    </FormGroup>\n                    }\n                    {this.state.sf2type === \"10X_old\" &&\n                    <FormGroup>\n                        <Label>10X SF2 Options (old)</Label>\n\n                        <FormGroup>\n                            {this.renderBarcodeSetCheckbox()}\n                            {this.renderHasPoolsCheckbox()}\n                            {this.renderNumberOfPoolsInput()}\n                        </FormGroup>\n\n                        {this.renderContainerTypeDropdown()}\n                        {this.renderNumberOfSamplesOrLibrariesInput()}\n\n                    </FormGroup>}\n                    {this.state.sf2type === \"10X\" &&\n                    <FormGroup>\n                        <Label>10X SF2 Options</Label>\n\n                        <FormGroup>\n                            {this.renderBarcodeSetCheckbox()}\n                            {this.renderHasUnpooledSamplesCheckbox()}\n                            {this.renderNumberOfUnpooledSamplesInput()}\n                            {this.renderHasPoolsCheckbox()}\n                            {this.renderNumberOfPoolsInput()}\n                            {this.renderNumberOf10XSamplesInPoolsInputs()}\n                            {this.state.numberOfPoolsAndUnpooledSamplesIsInvalid &&\n                                <span style={{color: \"#f83244\"}} >Cannot create an SF2 with no pools and no unpooled samples.</span>\n                            }\n                        </FormGroup>\n                    </FormGroup>\n                    }\n                    {this.state.sf2type === \"Library\" &&\n                    <FormGroup>\n                        <Label>Library SF2 Options</Label>\n\n                        <FormGroup>\n                            {this.renderCustomerIsSendingPlatesCheckbox()}\n                            {this.renderHasCustomPrimersCheckbox()}\n                            {this.renderNumberOfCustomPrimersInput()}\n                            {this.renderHasUnpooledLibrariesCheckbox()}\n                            {this.renderNumberOfUnpooledLibrariesInput()}\n                            {this.renderHasPoolsCheckbox()}\n                            {this.renderNumberOfPoolsInput()}\n                            {this.renderNumberOfLibrariesInPoolsInputs()}\n                            {this.state.numberOfPoolsAndUnpooledSamplesIsInvalid &&\n                            <span style={{color: \"#f83244\"}} >Cannot create an SF2 with no pools and no unpooled samples.</span>\n                            }\n                        </FormGroup>\n                    </FormGroup>\n                    }\n                    <FormGroup>\n                        <Label for=\"comments\">Comments</Label>\n                        <Input type=\"textarea\"\n                               name=\"comments\"\n                               id=\"comments\"\n                               placeholder=\"Enter your comments here\"\n                               autoComplete=\"off\"\n                               onChange={this.handleCommentsChange}\n                               onInput={this.handleCommentsChange}\n                               value={this.state.comments}\n                        />\n                    </FormGroup>\n                    <br/>\n                    <Button onClick={this.handleSubmit}>Submit</Button>\n                    <span>   </span>\n                    <Button disabled={!this.state.reissueIsEnabled}\n                            onClick={this.handleReissue}>\n                        Reissue\n                    </Button>\n                </Form>\n            </div>\n        );\n    };\n};\n","// @flow\nimport React from 'react';\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\n\n\ntype Props = {\n    active: boolean,\n    formUrl: string\n};\n\n\nconst Stage1Modal = (props: Props) => {return (\n    <Modal isOpen={props.active} style={{minWidth: \"75%\"}} >\n        <ModalHeader>Project Setup Completed</ModalHeader>\n        <ModalBody>\n            <div>\n            The contents of the Project Setup form have been saved to the database.\n            </div>\n            <br/>\n            <a href={props.formUrl}>Return to Project Setup form</a>\n        </ModalBody>\n    </Modal>\n)};\n\n\nexport default Stage1Modal;\n","// @flow\nimport React from 'react';\n\nimport Stage1Form from './components/stage1/Stage1Form';\nimport Stage1Modal from './components/stage1/Stage1Modal';\nimport { getCallbackHref } from './functions/lib.js';\n\n\nexport default class App extends React.Component{\n    state = {\n        stage1FormUrl: '',\n        stage1ModalIsActive: false\n    };\n\n    // Callback function to submit the data to the server for stage 1\n    submitData = (project_data: string) : void => {\n\n        const submit_url = getCallbackHref(window.location).concat(\"submit/\");\n\n        fetch(submit_url, {\n          method: 'POST',\n          mode: 'cors',\n          body: project_data,\n          headers:{\n            'Content-Type': 'application/json'\n          }\n        })\n            .then(response => response.json())\n            .then(\n            json => {\n                console.log('Success (submit):', JSON.stringify(json));\n                this.setState(\n                    {\n                        stage1FormUrl: '',\n                        stage1ModalIsActive: true\n                    });\n            }).catch(error => {\n                console.error('Error (submit):', error);\n                alert('Network error (submit). Please try again later.');\n            });\n\n    };\n\n\n    // Callback function to reissue an SF2 for a project for stage 1\n    reissueProject = (projectID : string, comments : string) : void => {\n        console.log('reissuing');\n\n        const reissue_url = getCallbackHref(window.location).concat(\"reissue/\"); \n        const reissue_json = {'projectID': projectID, 'comments': comments};\n\n        fetch(reissue_url, {\n          method: 'POST',\n          mode: 'cors',\n          body: JSON.stringify(reissue_json),\n          headers:{\n            'Content-Type': 'application/json'\n          }\n        })\n            .then(response => response.json())\n            .then(\n            json => {\n                console.log('Success (reissue):', JSON.stringify(json));\n                this.setState(\n                    {\n                        stage1FormUrl: '',\n                        stage1ModalIsActive: true\n                    });\n            }).catch(error => {\n                console.error('Error (reissue):', error);\n                alert('Network error (reissue). Please try again later.');\n            });\n\n    };\n\n\n    render() {\n        return (\n                <div style={{margin: 10}}>\n                <Stage1Form submitData={this.submitData} reissueProject={this.reissueProject}/>\n                <Stage1Modal formUrl={this.state.stage1FormUrl} active={this.state.stage1ModalIsActive}/>\n            </div>\n        )\n    };\n\n};\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}